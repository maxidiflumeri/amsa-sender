import { BadRequestException, Injectable, InternalServerErrorException, Logger, NotFoundException } from '@nestjs/common';
import { chunk } from 'lodash';
import { PrismaService } from 'src/prisma/prisma.service';
import * as fs from 'fs/promises';
import { parseCsvEmail } from 'src/modules/whatsapp/campanias/utils/csv-parser';

@Injectable()
export class CampaniasEmailService {
    private readonly logger = new Logger(CampaniasEmailService.name);

    constructor(private readonly prisma: PrismaService) { }

    async obtenerCampa√±as() {
        this.logger.log('üîç Buscando campa√±as activas...');
        return this.prisma.campa√±aEmail.findMany({
            where: { archivada: false },
            include: { contactos: true },
            orderBy: { createdAt: 'desc' },
        });
    }

    async crearCampa√±aEmail(dto: { nombre: string; userId: string; }, filePath: string) {
        this.logger.log(`üì• Creando campa√±a de email: ${dto.nombre}`);
        try {
            const { nombre, userId } = dto;
            const contactos = await parseCsvEmail(filePath);

            // 1. Crear campa√±a
            const campania = await this.prisma.campa√±aEmail.create({
                data: {
                    nombre,
                    userId: parseInt(userId),
                    createdAt: new Date()
                },
            });

            // 2. Agregar contactos en bloques de 10.000
            const bloques = chunk(contactos, 10000);
            for (const grupo of bloques) {
                await this.prisma.contactoEmail.createMany({
                    data: grupo.map((c) => ({
                        email: c.email,
                        datos: c.datos,
                        campa√±aId: campania.id,
                    })),
                });
            }

            await fs.unlink(filePath);
            this.logger.log(`üßπ Archivo CSV eliminado: ${filePath}`);

            return {
                id: campania.id,
                totalContactos: contactos.length,
                mensaje: 'Campa√±a creada correctamente',
            };
        } catch (error) {
            console.log('Error al crear campa√±a de email:', error);
            console.log(error.message)
            throw new InternalServerErrorException('Error al crear campa√±a de email: ' + error.message);
        }
    }

    async eliminarCampa√±a(id: number) {
        this.logger.log(`üóëÔ∏è Eliminando campa√±a ${id}`);
        const campa√±a = await this.prisma.campa√±aEmail.findUnique({ where: { id } });

        if (!campa√±a) throw new NotFoundException('Campa√±a no encontrada');
        if (campa√±a.estado === 'procesando') {
            this.logger.warn(`‚ùå No se puede eliminar campa√±a ${id} porque est√° procesando`);
            throw new BadRequestException('No se puede eliminar una campa√±a en proceso');
        }

        // if (campa√±a.jobId) {
        //     try {
        //         const job: Job | undefined = await this.colaEnvios.getJob(campa√±a.jobId);
        //         if (job) {
        //             await job.remove();
        //             this.logger.log(`üóëÔ∏è Job ${campa√±a.jobId} eliminado de la cola.`);
        //         }
        //     } catch (err) {
        //         this.logger.warn(`‚ö†Ô∏è No se pudo eliminar el job ${campa√±a.jobId}: ${err.message}`);
        //     }
        // }

        await this.prisma.contactoEmail.deleteMany({ where: { campa√±aId: campa√±a.id } });
        await this.prisma.campa√±aEmail.update({
            where: { id: campa√±a.id },
            data: { archivada: true },
        });

        this.logger.log(`‚úÖ Campa√±a ${id} archivada y contactos eliminados`);
        return { message: 'Campa√±a eliminada con contactos. Reportes conservados.' };
    }
}