import { Injectable, Logger } from '@nestjs/common';
import { PrismaService } from '../../../prisma/prisma.service';
import * as Handlebars from 'handlebars';
import { Prisma } from '@prisma/client';

@Injectable()
export class TemplatesService {
    private readonly logger = new Logger(TemplatesService.name);

    constructor(private readonly prisma: PrismaService) { }

    async previewTemplate(data: { templateId?: number; contenido?: string; ejemplo: any }) {
        const { templateId, contenido, ejemplo } = data;
        this.logger.log(`üß™ Generando vista previa de template${templateId ? ` (ID ${templateId})` : ''}`);

        if (!ejemplo || typeof ejemplo !== 'object') {
            this.logger.warn('‚ùå Ejemplo inv√°lido recibido en preview');
            throw new Error('Debe enviar un objeto ejemplo v√°lido');
        }

        let contenidoTemplate = contenido;

        if (templateId) {
            const template = await this.prisma.template.findUnique({ where: { id: templateId } });
            if (!template) {
                this.logger.warn(`‚ö†Ô∏è Template ${templateId} no encontrado`);
                throw new Error('Template no encontrado');
            }
            contenidoTemplate = template.contenido;
        }

        if (!contenidoTemplate || typeof contenidoTemplate !== 'string') {
            this.logger.warn(`‚ö†Ô∏è Contenido de template vac√≠o o inv√°lido`);
            throw new Error('Falta el contenido del template');
        }

        const compiled = Handlebars.compile(contenidoTemplate);
        return { mensaje: compiled(ejemplo) };
    }

    async previewReal(body: any) {
        const { templateId, campa√±aId } = body;
        this.logger.log(`üîç Generando preview real para template ${templateId} y campa√±a ${campa√±aId}`);

        const template = await this.prisma.template.findUnique({ where: { id: templateId } });
        if (!template) {
            this.logger.warn(`‚ö†Ô∏è Template ${templateId} no encontrado`);
            throw new Error('Template no encontrado');
        }

        const contacto = await this.prisma.contacto.findFirst({
            where: { campa√±aId, datos: { not: Prisma.JsonNull } },
            orderBy: { id: 'asc' },
        });

        if (!contacto || !contacto.datos) {
            this.logger.warn(`‚ö†Ô∏è No se encontr√≥ un contacto v√°lido con datos en campa√±a ${campa√±aId}`);
            throw new Error('No se encontr√≥ un contacto v√°lido con datos');
        }

        const compiled = Handlebars.compile(template.contenido);
        return {
            mensaje: compiled(contacto.datos),
            contacto: {
                numero: contacto.numero,
                datos: contacto.datos,
            },
        };
    }

    async crearTemplate(body: any) {
        const { nombre, contenido } = body;
        this.logger.log(`üìù Creando template: ${nombre}`);
        const nuevo = await this.prisma.template.create({ data: { nombre, contenido, createdAt: new Date() } });
        this.logger.log(`‚úÖ Template creado con ID: ${nuevo.id}`);
        return nuevo;
    }

    async listarTemplates() {
        this.logger.log('üìÑ Listando todos los templates');
        const templates = await this.prisma.template.findMany({ orderBy: { createdAt: 'desc' } });
        this.logger.log(`‚úÖ ${templates.length} templates encontrados`);
        return templates;
    }

    async eliminarTemplate(id: number) {
        this.logger.log(`üóëÔ∏è Eliminando template ID: ${id}`);
        await this.prisma.template.delete({ where: { id } });
        this.logger.log(`‚úÖ Template ${id} eliminado`);
        return { mensaje: 'Template eliminado' };
    }

    async editarTemplate(id: number, body: any) {
        const { nombre, contenido } = body;
        this.logger.log(`‚úèÔ∏è Editando template ${id} ‚Üí Nuevo nombre: ${nombre}`);
        const actualizado = await this.prisma.template.update({
            where: { id },
            data: { nombre, contenido },
        });
        this.logger.log(`‚úÖ Template ${id} actualizado`);
        return actualizado;
    }
}