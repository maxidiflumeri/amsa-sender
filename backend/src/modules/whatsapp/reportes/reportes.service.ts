import { Injectable, Logger } from '@nestjs/common';
import { PrismaService } from 'src/prisma/prisma.service';

@Injectable()
export class ReportesService {
    private readonly logger = new Logger(ReportesService.name);

    constructor(private readonly prisma: PrismaService) { }

    async obtenerCampaniasConReportes() {
        this.logger.log('üìä Buscando campa√±as con reportes...');
        try {
            const reportes = await this.prisma.reporte.findMany({ include: { campa√±a: true } });

            const campa√±asUnicas = Array.from(
                new Map(
                    reportes
                        .filter((r) => r.campa√±a !== null)
                        .map((r) => [r.campa√±a!!.id, r.campa√±a]),
                ).values(),
            );

            this.logger.log(`‚úÖ Campa√±as con reportes obtenidas: ${campa√±asUnicas.length}`);
            return campa√±asUnicas;
        } catch (error) {
            this.logger.error(`‚ùå Error al obtener campa√±as con reportes: ${error.message}`, error.stack);
            throw error;
        }
    }

    async obtenerReportes(campa√±aId?: string) {
        this.logger.log(`üìÑ Obteniendo reportes${campa√±aId ? ` para campa√±a ID ${campa√±aId}` : ''}`);
        try {
            const where = campa√±aId ? { campa√±aId: Number(campa√±aId) } : {};
            const reportes = await this.prisma.reporte.findMany({ where, include: { campa√±a: true } });

            this.logger.log(`‚úÖ Reportes obtenidos: ${reportes.length}`);
            return reportes;
        } catch (error) {
            this.logger.error(`‚ùå Error al obtener reportes: ${error.message}`, error.stack);
            throw error;
        }
    }
}