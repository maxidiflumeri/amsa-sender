import { Injectable, Logger } from '@nestjs/common';
import { PrismaService } from '../../../prisma/prisma.service';
import { InjectQueue } from '@nestjs/bullmq';
import { Queue } from 'bullmq';
import { Mensaje } from '@prisma/client';

@Injectable()
export class MensajesService {
    private readonly logger = new Logger(MensajesService.name);

    constructor(
        private readonly prisma: PrismaService,
        @InjectQueue('colaEnvios') private readonly colaEnvios: Queue,
    ) { }

    async encolarEnvio(body: any) {
        const { sessionIds, campa√±a, config = {} } = body;
        this.logger.log(`üì® Encolando campa√±a ${campa√±a} con sesiones: ${JSON.stringify(sessionIds)}`);

        try {
            await this.prisma.campa√±a.update({
                where: { id: campa√±a },
                data: {
                    estado: 'procesando',
                    sesiones: JSON.stringify(sessionIds),
                    config,
                },
            });

            await this.colaEnvios.add('enviar', { sessionIds, campa√±a, config });

            this.logger.log(`‚úÖ Campa√±a ${campa√±a} encolada correctamente`);
            return { message: 'Env√≠o encolado correctamente' };
        } catch (err) {
            this.logger.error(`‚ùå Error al encolar campa√±a ${campa√±a}: ${err.message}`, err.stack);
            await this.prisma.campa√±a.update({
                where: { id: campa√±a },
                data: { estado: 'pendiente' },
            });
            throw new Error('No se pudo encolar la campa√±a');
        }
    }

    async obtenerMetricas(campaniaId: number) {
        this.logger.log(`üìä Obteniendo m√©tricas para campa√±a ${campaniaId}`);

        try {
            const enviados = await this.prisma.mensaje.count({
                where: { campa√±aId: campaniaId, fromMe: true },
            });

            const respuestas = await this.prisma.mensaje.findMany({
                where: {
                    campa√±aId: campaniaId,
                    fromMe: false,
                },
                select: { numero: true },
            });

            const contactosRespondieron = new Set(respuestas.map((r) => r.numero)).size;
            const totalRespuestas = respuestas.length;

            const porcentajeRespondieron =
                enviados > 0 ? (contactosRespondieron / enviados) * 100 : 0;

            this.logger.log(
                `üìà Enviados: ${enviados}, Respuestas: ${totalRespuestas}, Contactos √∫nicos: ${contactosRespondieron}, Porcentaje: ${porcentajeRespondieron.toFixed(2)}%`,
            );

            return {
                enviados,
                contactosRespondieron,
                totalRespuestas,
                porcentajeRespondieron,
            };
        } catch (error) {
            this.logger.error(`‚ùå Error al obtener m√©tricas: ${error.message}`, error.stack);
            throw new Error('No se pudo obtener m√©tricas.');
        }
    }

    async guardarMensaje(data: {
        numero: string;
        campa√±aId?: number;
        ani: string;
        mensaje: string;
        fromMe: boolean;
        fecha: Date;
        tipo: string;
    }) {
        this.logger.debug(
            `üíæ Guardando mensaje para ${data.numero} [fromMe: ${data.fromMe}]`,
        );
        return this.prisma.mensaje.create({
            data: {
                ...data,
                campa√±aId: data.campa√±aId ?? null,
                fecha: new Date(data.fecha),
            },
        });
    }

    async crearMensaje(body: any) {
        const { numero, campa√±aId, ani, mensaje, fromMe, fecha, tipo } = body;
        this.logger.log(
            `‚úçÔ∏è Creando mensaje manual para ${numero} en campa√±a ${campa√±aId}`,
        );
        try {
            return await this.prisma.mensaje.create({
                data: {
                    numero,
                    campa√±aId: campa√±aId ? Number(campa√±aId) : null,
                    ani,
                    mensaje,
                    fromMe,
                    fecha: new Date(fecha),
                    tipo,
                },
            });
        } catch (error) {
            this.logger.error(`‚ùå Error al guardar mensaje: ${error.message}`, error.stack);
            throw error;
        }
    }

    async obtenerMensajes(campa√±aId?: number) {
        this.logger.log(
            `üìö Obteniendo mensajes ${campa√±aId ? 'para campa√±a ' + campa√±aId : ''}`,
        );
        return this.prisma.mensaje.findMany({
            where: {
                campa√±aId: campa√±aId ? campa√±aId : undefined,
            },
            orderBy: {
                fecha: 'asc',
            },
        });
    }

    async obtenerMensajesEntreEnvios(
        campa√±aId: number,
        numero: string,
    ): Promise<Mensaje[]> {
        this.logger.log(
            `üîç Buscando mensajes de ${numero} entre env√≠os de campa√±a ${campa√±aId}`,
        );

        const reporteActual = await this.prisma.reporte.findFirst({
            where: {
                campa√±aId,
                numero,
                enviadoAt: { not: null },
            },
            orderBy: { enviadoAt: 'asc' },
            select: {
                enviadoAt: true,
            },
        });

        if (!reporteActual?.enviadoAt) {
            this.logger.warn(
                `‚ö†Ô∏è No se encontr√≥ fecha de env√≠o en campa√±a ${campa√±aId} para ${numero}`,
            );
            throw new Error('No se encontr√≥ fecha de env√≠o para este n√∫mero en la campa√±a');
        }

        const desde = reporteActual.enviadoAt;

        const siguienteReporte = await this.prisma.reporte.findFirst({
            where: {
                numero,
                campa√±aId: { not: campa√±aId },
                enviadoAt: { gt: desde },
            },
            orderBy: { enviadoAt: 'asc' },
            select: { enviadoAt: true },
        });

        const hasta = siguienteReporte?.enviadoAt || new Date();
        this.logger.debug(`üìÜ Rango de b√∫squeda: desde ${desde.toISOString()} hasta ${hasta.toISOString()}`);

        return this.prisma.mensaje.findMany({
            where: {
                numero,
                fecha: {
                    gte: desde,
                    lt: hasta,
                },
            },
            orderBy: { fecha: 'asc' },
        });
    }
}