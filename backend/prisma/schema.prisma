generator client {
  provider = "prisma-client-js"
}

//datasource db {
//  provider = "sqlite"
//  url      = "file:./dev.db"
//}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Campa√±a {
  id         Int        @id @default(autoincrement())
  nombre     String
  createdAt  DateTime   
  enviadoAt  DateTime?
  agendadoAt DateTime? // NUEVO: fecha y hora del agendamiento
  estado     String     @default("pendiente") // nuevo campo
  pausada    Boolean    @default(false) // <-- NUEVO
  templateId Int? // FK opcional
  jobId      String? // üëà NUEVO
  template   Template?  @relation(fields: [templateId], references: [id])
  contactos  Contacto[]
  reportes   Reporte[]
  archivada  Boolean    @default(false)
  sesiones   String? // JSON.stringified sessionIds
  config     Json? // { batchSize, delayEntreMensajes, delayEntreLotes }
  @@map("Campa√±a")
}

model Contacto {
  id         Int      @id @default(autoincrement())
  numero     String
  mensaje    String?  @db.Text
  datos      Json? // ‚¨ÖÔ∏è Ac√° ir√°n los datos variables del CSV
  campa√±aId Int
  campa√±a   Campa√±a @relation(fields: [campa√±aId], references: [id])
  @@map("Contacto")
}

model Reporte {
  id         Int       @id @default(autoincrement())
  numero     String
  mensaje    String?   @db.Text
  estado     String
  aniEnvio   String? // <--- este campo
  enviadoAt  DateTime? // nuevo campo
  datos      Json? // ‚Üê Nuevo campo para almacenar los datos del contacto (del CSV)
  campa√±a   Campa√±a? @relation(fields: [campa√±aId], references: [id], onDelete: SetNull)
  campa√±aId Int?
  @@map("Reporte")
}

model Sesion {
  id        Int     @id @default(autoincrement())
  sessionId String  @unique
  estado    String
  ani       String? // nuevo campo opcional
  @@map("Sesion")
}

model Template {
  id        Int        @id @default(autoincrement())
  nombre    String
  contenido String     @db.Text // Ej: "Hola {{nombre}}, tu deuda es de {{deuda}}"
  createdAt DateTime   
  campa√±as Campa√±a[] // Relaci√≥n con campa√±as
  @@map("Template")
}

model Mensaje {
  id         Int      @id @default(autoincrement())
  numero     String
  campa√±aId Int? // Puede estar o no vinculado a una campa√±a
  ani        String
  mensaje    String   @db.Text
  fromMe     Boolean // true = enviado, false = recibido
  fecha      DateTime
  tipo       String? // "texto", "imagen", etc.
  @@map("Mensaje")
}

model CuentaSMTP {
  id        Int      @id @default(autoincrement())
  nombre    String // ej. "Cuenta corporativa"
  host      String
  puerto    Int
  usuario   String
  password  String // se puede cifrar m√°s adelante
  remitente String // nombre del remitente que ver√° el destinatario
  emailFrom String // direcci√≥n de email usada en el "From"
  creadoAt  DateTime
  @@map("CuentaSMTP")
}

model Usuario {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  nombre   String
  foto     String?
  rol      String   @default("usuario")
  creadoAt DateTime 
  @@map("Usuario")
}

model TemplateEmail {
  id        Int             @id @default(autoincrement())
  nombre    String
  asunto    String
  html      String          @db.MediumText
  design    Json
  creadoAt  DateTime        
  campanias Campa√±aEmail[]
  @@map("TemplateEmail")
}

model Campa√±aEmail {
  id         Int             @id @default(autoincrement())
  nombre     String
  createdAt  DateTime        
  enviadoAt  DateTime?
  agendadoAt DateTime?
  estado     String          @default("pendiente") // pendiente | agendada | procesando | finalizada
  pausada    Boolean         @default(false)
  templateId Int?
  jobId      String?
  template   TemplateEmail?  @relation(fields: [templateId], references: [id])
  contactos  ContactoEmail[]
  reportes   ReporteEmail[]
  archivada  Boolean         @default(false)
  config     Json?
  userId     Int
  @@map("Campa√±aEmail")
}

model ContactoEmail {
  id         Int            @id @default(autoincrement())
  email      String
  nombre     String?
  datos      Json? // variables del CSV
  campa√±aId Int
  campa√±a   Campa√±aEmail  @relation(fields: [campa√±aId], references: [id], onDelete: Cascade)
  reportes   ReporteEmail[]
  @@map("ContactoEmail")
}

model ReporteEmail {
  id               Int           @id @default(autoincrement())
  campa√±aId       Int
  contactoId       Int
  estado           String // 'enviado', 'fallido', etc.
  enviadoAt        DateTime?
  error            String? @db.Text
  asunto           String? // asunto final con variables reemplazadas
  html             String?       @db.MediumText // HTML renderizado con datos del contacto
  creadoAt         DateTime      
  trackingTok      String?       @unique // token por env√≠o (se setea al enviar)
  primeroAbiertoAt DateTime?
  primeroClickAt   DateTime?  
  smtpMessageId    String?        @unique @db.VarChar(255)
  campa√±a          Campa√±aEmail @relation(fields: [campa√±aId], references: [id], onDelete: Cascade)
  contacto         ContactoEmail @relation(fields: [contactoId], references: [id], onDelete: Cascade)
  eventos          EmailEvento[]
  rebotes          EmailRebote[]

  @@index([campa√±aId])
  @@index([contactoId])
  @@map("ReporteEmail")
}

model Configuracion {
  id        Int      @id @default(autoincrement())
  userId    Int
  scope     String // Ej: 'whatsapp.envio', 'email.envio', etc.
  clave     String // Ej: 'batchSize', 'delayEntreMensajes'
  valor     String // Guardado como string por simplicidad
  updatedAt DateTime @updatedAt

  @@unique([userId, scope, clave])
  @@map("Configuracion")
}

model EmailEvento {
  id             Int             @id @default(autoincrement())
  reporteId      Int
  tipo           EmailEventoTipo // OPEN | CLICK
  urlDestino     String? // s√≥lo para CLICK
  dominioDestino String? // s√≥lo para CLICK (ej: "example.com")
  fecha          DateTime        

  // metadatos
  ip             String?
  userAgent      String?
  deviceFamily   String? // "Desktop" | "Mobile" | "Tablet" | "GenericPhone" | "Bot" | etc.
  osName         String?
  osVersion      String?
  browserName    String?
  browserVersion String?
  uaRaw          String?
  reporte        ReporteEmail @relation(fields: [reporteId], references: [id], onDelete: Cascade)

  @@index([reporteId, tipo, fecha])
  @@index([tipo, fecha])
  @@map("EmailEvento")
}

enum EmailEventoTipo {
  OPEN
  CLICK
}

model EmailRebote {
  id            Int           @id @default(autoincrement())
  reporteId     Int?          // <- ahora opcional
  fecha         DateTime      
  codigo        String?       @db.VarChar(32)   // 5.1.1 / 550 / etc.
  descripcion   String?       @db.Text          // motivo/diagn√≥stico
  raw           String?       @db.MediumText    // cuerpo/DSN (m√°s grande)    
  correo        String?        @db.VarChar(320)  
  smtpMessageId String?       @db.VarChar(255)
  xAmsaSender   String?       @db.VarChar(512)
  reporte       ReporteEmail? @relation(fields: [reporteId], references: [id], onDelete: SetNull)

  @@index([reporteId, fecha])
  @@map("EmailRebote")
}

model EmailDesuscripciones {
  id            String   @id @default(cuid())
  tenantId      String
  email         String   // guard√° el original por auditor√≠a
  emailHash     String   // normalizado: trim + lowercase + hash (p.ej. sha256)
  scope         String   @default("global") // "global" o "campaign"
  campaignId    String   @default("")       // <‚Äî ya no es opcional; default vac√≠o
  reason        String?  // "user_click", "admin_add", "list-unsubscribe", etc.
  source        String?  // "footer_link", "header_oneclick", "api", etc.
  createdAt     DateTime 

  @@index([tenantId, emailHash])
  @@unique([tenantId, emailHash, scope, campaignId])
  @@map("EmailDesuscripciones")
}

enum TipoTareaProgramada {
  REPORTE_EMAIL_DIARIO
}

enum EstadoEjecucionTarea {
  queued
  running
  completed
  failed
  retrying
}

model TareaProgramada {
  id              Int                     @id @default(autoincrement())
  nombre          String
  tipo            TipoTareaProgramada
  habilitada      Boolean                 @default(true)
  expresionCron   String                  // ej: "0 8 * * *"
  zonaHoraria     String                  @default("America/Argentina/Buenos_Aires")
  // Config espec√≠fica (extensible)
  // { "reportes": { "rebotes": true, "acciones": true }, "asuntoTpl": "...", "htmlTpl": "...", "s3Prefix": "daily/" }
  configuracion   Json
  destinatarios   Json                    // string[] como JSON
  reintentosMax   Int                     @default(3)
  backoffMs       Int                     @default(60000)
  ultimaEjecucion DateTime?
  proximaEjecucion DateTime?

  creadoPorUsuarioId Int?
  creadoEn        DateTime                @default(now())
  actualizadoEn   DateTime                @updatedAt

  ejecuciones     EjecucionTarea[]

  @@map("TareaProgramada")
}

model EjecucionTarea {
  id          Int                   @id @default(autoincrement())
  tareaId     Int
  tarea       TareaProgramada       @relation(fields: [tareaId], references: [id], onDelete: Cascade)
  inicioEn    DateTime
  finEn       DateTime?
  estado      EstadoEjecucionTarea
  error       String?               @db.Text
  // ej: [{ "archivo":"rebotes_2025-09-26.csv", "bytes":12345, "s3Key":"daily/..."}]
  adjuntos    Json?
  logs        Json?

  @@index([tareaId])
  @@map("EjecucionTarea")
}