generator client {
  provider = "prisma-client-js"
}

//datasource db {
//  provider = "sqlite"
//  url      = "file:./dev.db"
//}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Campa√±a {
  id         Int         @id @default(autoincrement())
  nombre     String
  createdAt  DateTime    @default(now())
  enviadoAt  DateTime?
  agendadoAt DateTime? // NUEVO: fecha y hora del agendamiento
  estado     String      @default("pendiente") // nuevo campo
  pausada    Boolean   @default(false) // <-- NUEVO
  templateId Int?      // FK opcional
  jobId      String?   // üëà NUEVO
  template   Template? @relation(fields: [templateId], references: [id])
  contactos  Contacto[]
  reportes   Reporte[]
  archivada  Boolean @default(false)
  sesiones   String?   // JSON.stringified sessionIds
  config     Json?     // { batchSize, delayEntreMensajes, delayEntreLotes }
}

model Contacto {
  id         Int      @id @default(autoincrement())
  numero     String
  mensaje    String? @db.Text
  datos      Json?    // ‚¨ÖÔ∏è Ac√° ir√°n los datos variables del CSV
  campa√±aId  Int
  campa√±a    Campa√±a  @relation(fields: [campa√±aId], references: [id])
}


model Reporte {
  id         Int         @id @default(autoincrement())
  numero     String
  mensaje    String? @db.Text
  estado     String
  aniEnvio   String?  // <--- este campo
  enviadoAt  DateTime?   // nuevo campo
  datos      Json?     // ‚Üê Nuevo campo para almacenar los datos del contacto (del CSV)
  campa√±a    Campa√±a? @relation(fields: [campa√±aId], references: [id], onDelete: SetNull)
  campa√±aId  Int?
}

model Sesion {
  id         Int      @id @default(autoincrement())
  sessionId  String   @unique
  estado     String
  ani        String?   // nuevo campo opcional
}

model Template {
  id        Int      @id @default(autoincrement())
  nombre    String
  contenido String @db.Text   // Ej: "Hola {{nombre}}, tu deuda es de {{deuda}}"
  createdAt DateTime @default(now())
  campa√±as  Campa√±a[] // Relaci√≥n con campa√±as
}

model Mensaje {
  id         Int      @id @default(autoincrement())
  numero     String
  campa√±aId  Int?     // Puede estar o no vinculado a una campa√±a
  ani        String
  mensaje    String @db.Text
  fromMe     Boolean  // true = enviado, false = recibido
  fecha      DateTime
  tipo       String?  // "texto", "imagen", etc.
}

model CuentaSMTP {
  id          Int      @id @default(autoincrement())
  nombre      String   // ej. "Cuenta corporativa"
  host        String
  puerto      Int
  usuario     String
  password    String   // se puede cifrar m√°s adelante
  remitente   String   // nombre del remitente que ver√° el destinatario
  emailFrom   String   // direcci√≥n de email usada en el "From"
  creadoAt    DateTime @default(now())
}